import cv2
        ear = 0
        if face_results.multi_face_landmarks:
            lm = face_results.multi_face_landmarks[0].landmark
            top = np.array([lm[386].x, lm[386].y])
            bottom = np.array([lm[374].x, lm[374].y])
            ear = np.linalg.norm(top - bottom)  # pure vertical distance
        print(f"[EYE] EAR (top-bottom distance): {ear:.3f}")

        if ear < 0.015:
            if not ear_condition_start:
                ear_condition_start = current_time
            print(f"[EYE] EAR condition duration: {current_time - ear_condition_start:.1f} seconds")
        else:
            ear_condition_start = None

        # DY calculation
        dy = 0
        if pose_results.pose_landmarks:
            nose_y = pose_results.pose_landmarks.landmark[0].y
            if nose_base_y is None:
                nose_base_y = nose_y
            dy = (nose_y - nose_base_y) * 1000
            print(f"[HEAD] DY: {dy:.2f}")
            if dy > 150:
                if not dy_condition_start:
                    dy_condition_start = current_time
                print(f"[HEAD] DY condition duration: {current_time - dy_condition_start:.1f} seconds")
            else:
                dy_condition_start = None

        # Hand movement
        movement = 0
        if hands_results.multi_hand_landmarks:
            lm = hands_results.multi_hand_landmarks[0].landmark[10]
            hand_history.append((lm.x, lm.y, current_time))
            hand_history = [h for h in hand_history if current_time - h[2] <= 5]
            if len(hand_history) >= 2:
                movement = np.mean([
                    np.linalg.norm(np.array(hand_history[i][:2]) - np.array(hand_history[i-1][:2]))
                    for i in range(1, len(hand_history))
                ]) * 1000
        print(f"[HAND] Movement: {movement:.2f}")

        if movement < 13:
            if not hand_condition_start:
                hand_condition_start = current_time
            print(f"[HAND] Movement condition duration: {current_time - hand_condition_start:.1f} seconds")
        else:
            hand_condition_start = None

        if timer_running and not drowsy_detected:
            eye_drowsy = ear_condition_start and current_time - ear_condition_start >= 5
            head_drowsy = dy_condition_start and current_time - dy_condition_start >= 4
            hand_drowsy = hand_condition_start and current_time - hand_condition_start >= 5

            if hand_drowsy and (eye_drowsy or head_drowsy):
                drowsy_detected = True
                drowsiness_reason = "HAND + EYE" if eye_drowsy else "HAND + HEAD"
                print(f"=== DROWSINESS DETECTED: {drowsiness_reason} ===")

        cv2.imshow("Drowsiness Detection", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

# =====================
# Main Execution
# =====================
if __name__ == "__main__":
    threading.Thread(target=drowsiness_detection_loop, daemon=True).start()
    threading.Thread(target=timer_loop, daemon=True).start()
    app.run(host="0.0.0.0", port=5000)
