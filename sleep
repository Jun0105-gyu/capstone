from flask import Flask, jsonify
import cv2
import mediapipe as mp
import time
import numpy as np

app = Flask(__name__)
drowsy = False

mp_face_mesh = mp.solutions.face_mesh
mp_hands = mp.solutions.hands

face_mesh = mp_face_mesh.FaceMesh(min_detection_confidence=0.5, min_tracking_confidence=0.5)
hands = mp_hands.Hands(min_detection_confidence=0.5, min_tracking_confidence=0.5)

cap = cv2.VideoCapture(0)


eye_close_start_time = None
hand_static_start_time = None
drowsy = False

hand_11_history = []
FPS = 30
EYE_CLOSURE_THRESHOLD = 7
EYE_CLOSURE_DURATION = 5
HAND_THRESHOLD_PIXELS = 30

def calculate_hand_movement(hand_11_history):
    movements = [np.linalg.norm(np.array(hand_11_history[i]) - np.array(hand_11_history[i - 1])) for i in range(1, len(hand_11_history))]
    avg_movement = sum(movements) / len(movements) if movements else 0
    return avg_movement

@app.route("/detect_drowsiness", methods=["GET"])
def detect_drowsiness():
    global drowsy
    return jsonify({"drowsy": drowsy})

def detect_loop():
    global drowsy, eye_close_start_time, hand_static_start_time, hand_11_history
    while True:
        ret, frame = cap.read()
        if not ret:
            break
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        face_results = face_mesh.process(frame_rgb)
        hand_results = hands.process(frame_rgb)

        eye_closure_detected = False
        hand_detected = False

        if face_results.multi_face_landmarks:
            for face_landmarks in face_results.multi_face_landmarks:
                left_eye_top = face_landmarks.landmark[159]
                left_eye_bottom = face_landmarks.landmark[145]
                right_eye_top = face_landmarks.landmark[386]
                right_eye_bottom = face_landmarks.landmark[374]

                left_eye_diff = abs((left_eye_top.y - left_eye_bottom.y) * frame.shape[0])
                right_eye_diff = abs((right_eye_top.y - right_eye_bottom.y) * frame.shape[0])

                if left_eye_diff < EYE_CLOSURE_THRESHOLD and right_eye_diff < EYE_CLOSURE_THRESHOLD:
                    if eye_close_start_time is None:
                        eye_close_start_time = time.time()
                    elif time.time() - eye_close_start_time >= EYE_CLOSURE_DURATION:
                        eye_closure_detected = True
                else:
                    eye_close_start_time = None

        if hand_results.multi_hand_landmarks:
            hand_detected = True
            for hand_landmarks in hand_results.multi_hand_landmarks:
                landmark_11 = hand_landmarks.landmark[11]
                hand_11_x = int(landmark_11.x * frame.shape[1])
                hand_11_y = int(landmark_11.y * frame.shape[0])
                hand_11_pos = (hand_11_x, hand_11_y)
                hand_11_history.append(hand_11_pos)
                if len(hand_11_history) > FPS * 3:
                    hand_11_history.pop(0)
        else:
            hand_11_history.clear()
            hand_static_start_time = None

        avg_hand_movement = calculate_hand_movement(hand_11_history)
        hand_static = avg_hand_movement < HAND_THRESHOLD_PIXELS

        if hand_static:
            if hand_static_start_time is None:
                hand_static_start_time = time.time()
            elif time.time() - hand_static_start_time >= 5 and eye_closure_detected:
                if not drowsy:
                    drowsy = True
                    print("Drowsiness detected!")
        else:
            hand_static_start_time = None
            drowsy = False

def run_server():
    import threading
    t = threading.Thread(target=detect_loop)
    t.daemon = True
    t.start()
    app.run(host='0.0.0.0', port=5000)

if __name__ == "__main__":
    run_server()
