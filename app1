import cv2
import time
import threading
import numpy as np
import RPi.GPIO as GPIO
from flask import Flask, jsonify, request
from mediapipe.python.solutions import pose as mp_pose
from mediapipe.python.solutions import hands as mp_hands
from mediapipe.python.solutions import face_mesh as mp_face_mesh
from datetime import datetime
import json
import os
import requests
import traceback
from lcd_i2c import LCD
lcd = LCD()
lcd.clear()
lcd.print_line("Time: 00:00:00", 0)
STAT_FILE = "study_stats.json"

def wait_for_flask():
    import socket
    while True:
        try:
            s = socket.create_connection(('127.0.0.1', 5000), timeout=1)
            s.close()
            break
        except OSError:
            print("Flask Server waiting...")
            time.sleep(0.5)

# GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setup(17, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # Start
GPIO.setup(27, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # Stop
GPIO.setup(22, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # Reset
app = Flask(__name__)

# =====================
# Global State
# =====================
timer_running = False
start_time = None
elapsed_time = 0
elapsed_before_stop = 0
drowsy_detected = False
drowsiness_reason = ""

ear_condition_start = None
dy_condition_start = None
hand_condition_start = None
nose_base_y = None

lock = threading.Lock()

# MediaPipe initialization
pose = mp_pose.Pose()
hands = mp_hands.Hands()
face_mesh = mp_face_mesh.FaceMesh()

# =====================
# Timer Functions
# =====================
lcd_lock = threading.Lock()

def save_study_time(date, seconds):
    stats = {}
    if os.path.exists(STAT_FILE):
        with open(STAT_FILE, "r") as f:
            stats = json.load(f)

    if date in stats:
        prev = stats[date]
        if isinstance(prev, dict):
            prev = prev.get("study_seconds", 0)
        stats[date] = prev + int(seconds)
    else:
        stats[date] = int(seconds)
    with open(STAT_FILE, "w") as f:
        json.dump(stats, f)

def gpio_button_monitor():
    wait_for_flask()
    prev_state = [1, 1, 1]
    while True:
        btn1 = GPIO.input(17)
        btn2 = GPIO.input(27)
        btn3 = GPIO.input(22)
        try:
            if prev_state[0] == 1 and btn1 == 0:
                print("[GPIO] Start 버튼 눌림")
                requests.get("http://127.0.0.1:5000/start")
            if prev_state[1] == 1 and btn2 == 0:
                print("[GPIO] Stop 버튼 눌림")
                requests.get("http://127.0.0.1:5000/stop")
            if prev_state[2] == 1 and btn3 == 0:
                print("[GPIO] Reset 버튼 눌림")
                requests.get("http://127.0.0.1:5000/reset")
        except Exception as e:
            print("[GPIO] requests 에러 발생:", e)
            traceback.print_exc()
        prev_state = [btn1, btn2, btn3]
        time.sleep(0.05)

def timer_loop():
    global start_time, elapsed_time
    while True:
        if timer_running and start_time:
            elapsed_time = time.time() - start_time + elapsed_before_stop
        with lcd_lock:
            lcd.print_line(f"Time: {format_time(elapsed_time)}", 0)
        time.sleep(1)

@app.route("/get_stats")
def get_stats():
    with lock:
        stats = {}
        if os.path.exists("study_stats.json"):
            with open("study_stats.json", "r") as f:
                stats = json.load(f)
    return jsonify(stats)

def format_time(seconds):
    h = int(seconds) // 3600
    m = (int(seconds) % 3600) // 60
    s = int(seconds) % 60
    return f"{h:02}:{m:02}:{s:02}"

@app.route("/start")
def start():
    global timer_running, start_time
    with lock:
        if not timer_running:
            start_time = time.time()
            timer_running = True
            print("[API] Timer started")
    return "Started"

@app.route("/stop")
def stop():
    global timer_running, elapsed_before_stop, start_time
    with lock:
        if timer_running:
            timer_running = False
            elapsed_before_stop = elapsed_time
            start_time = None
            print("[API] Timer stopped")
    return "Stopped"

@app.route("/reset")
def reset():
    global timer_running, start_time, elapsed_time, drowsy_detected
    global ear_condition_start, dy_condition_start, hand_condition_start, drowsiness_reason
    global elapsed_before_stop
    with lock:
        # === 통계 저장 추가 ===
        today = datetime.now().strftime("%Y-%m-%d")
        save_study_time(today, elapsed_before_stop)
        # ======================
        timer_running = False
        start_time = None
        elapsed_time = 0
        elapsed_before_stop = 0
        ear_condition_start = None
        dy_condition_start = None
        hand_condition_start = None
        drowsy_detected = False
        drowsiness_reason = ""
        print("[RESET] System reset")
    return "Reset"

@app.route("/clear_drowsiness")
def clear_drowsiness():
    global drowsy_detected, drowsiness_reason
    global ear_condition_start, dy_condition_start, hand_condition_start
    with lock:
        drowsy_detected = False
        drowsiness_reason = ""
        ear_condition_start = None
        dy_condition_start = None
        hand_condition_start = None
        print("[CLEAR] Drowsiness state cleared")
    return "Cleared"

@app.route("/get_time")
def get_time():
    with lock:
        return jsonify({"time": format_time(elapsed_time)})

@app.route("/update_time", methods=["POST"])
def update_time():
    global elapsed_before_stop
    with lock:
        data = request.get_json()
        h, m, s = map(int, data["time"].split(":"))
        elapsed_before_stop = h * 3600 + m * 60 + s
        print("[RECEIVED TIME]", data["time"])
        # 오늘 날짜로 누적 저장
        today = datetime.now().strftime("%Y-%m-%d")
        save_study_time(today, elapsed_before_stop)
    return "Time updated"

@app.route("/detect_drowsiness")
def detect_drowsiness():
    with lock:
        return jsonify({"drowsy": drowsy_detected, "reason": drowsiness_reason})

@app.route("/update_statistics", methods=["POST"])
def update_statistics():
    global elapsed_before_stop
    with lock:
        data = request.get_json()
        h, m, s = map(int, data["time"].split(":"))
        elapsed_before_stop = h * 3600 + m * 60 + s
        today = datetime.now().strftime("%Y-%m-%d")
        save_study_time(today, elapsed_before_stop)
    return "Statistics updated"

# =====================
# Drowsiness Detection Thread
# =====================
def drowsiness_detection_loop():
    global ear_condition_start, dy_condition_start, hand_condition_start
    global drowsy_detected, drowsiness_reason, nose_base_y

    cap = cv2.VideoCapture(0)
    hand_history = []

    while True:
        ret, frame = cap.read()
        if not ret:
            continue

        rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        pose_results = pose.process(rgb)
        hands_results = hands.process(rgb)
        face_results = face_mesh.process(rgb)

        current_time = time.time()

        # EAR calculation (only top-bottom distance)
        ear = 0
        if face_results.multi_face_landmarks:
            lm = face_results.multi_face_landmarks[0].landmark
            top = np.array([lm[386].x, lm[386].y])
            bottom = np.array([lm[374].x, lm[374].y])
            ear = np.linalg.norm(top - bottom)  # pure vertical distance
            print(f"[EYE] EAR (top-bottom distance): {ear:.3f}")

            if ear < 0.019:
                if ear_condition_start is None:
                    ear_condition_start = current_time
                duration = current_time - ear_condition_start
                print(f"[EYE] EAR condition duration: {duration:.1f}  seconds")
            else:
                ear_condition_start = None

        # DY calculation
        dy = 0
        if pose_results.pose_landmarks:
            nose_y = pose_results.pose_landmarks.landmark[0].y
            if nose_base_y is None:
                nose_base_y = nose_y
            dy = (nose_y - nose_base_y) * 1000
            print(f"[HEAD] DY: {dy:.2f}")
            if dy > 150:
                if not dy_condition_start:
                    dy_condition_start = current_time
                print(f"[HEAD] DY condition duration: {current_time - dy_condition_start:.1f} seconds")
            else:
                dy_condition_start = None
        else:
            dy_condition_start = None  # 코 인식X시 초기화

        # Hand movement
        movement = 0
        if hands_results.multi_hand_landmarks:
            lm = hands_results.multi_hand_landmarks[0].landmark[10]
            hand_history.append((lm.x, lm.y, current_time))
            hand_history = [h for h in hand_history if current_time - h[2] <= 5]
            if len(hand_history) >= 2:
                movement = np.mean([
                    np.linalg.norm(np.array(hand_history[i][:2]) - np.array(hand_history[i-1][:2]))
                    for i in range(1, len(hand_history))
                ]) * 1000
            print(f"[HAND] Movement: {movement:.2f}")

            if movement < 13:
                if not hand_condition_start:
                    hand_condition_start = current_time
                print(f"[HAND] Movement condition duration: {current_time - hand_condition_start:.1f} seconds")
            else:
                hand_condition_start = None
        else:
            hand_condition_start = None  # 손 인식X시 초기화

        if timer_running and not drowsy_detected:
            eye_drowsy = ear_condition_start and current_time - ear_condition_start >= 5
            head_drowsy = dy_condition_start and current_time - dy_condition_start >= 4
            hand_drowsy = hand_condition_start and current_time - hand_condition_start >= 5

            if hand_drowsy and (eye_drowsy or head_drowsy):
                drowsy_detected = True
                drowsiness_reason = "HAND + EYE" if eye_drowsy else "HAND + HEAD"
                print(f"=== DROWSINESS DETECTED: {drowsiness_reason} ===")

        cv2.imshow("Drowsiness Detection", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

# =====================
# Main Execution
# =====================
if __name__ == "__main__":
    threading.Thread(target=drowsiness_detection_loop, daemon=True).start()
    threading.Thread(target=timer_loop, daemon=True).start()
    threading.Thread(target=gpio_button_monitor, daemon=True).start()
    app.run(host="0.0.0.0", port=5000, threaded=True)
