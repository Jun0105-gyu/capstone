from flask import Flask, jsonify, request
import cv2
import mediapipe as mp
import time
import numpy as np
import threading

app = Flask(__name__)

# 타이머 관련 변수
timer_running = False
stopwatch_start_time = None
current_time_str = "00:00:00"
elapsed_before_stop = 0

# 졸음 감지 변수
drowsy = False
reason = ""
already_alerted = False
eye_start_time = None
hand_start_time = None
head_start_time = None
eye_condition = False
hand_condition = False
head_condition = False
nose_y_history = []
hand_10_history = []

# MediaPipe 초기화
mp_face_mesh = mp.solutions.face_mesh
mp_hands = mp.solutions.hands
face_mesh = mp_face_mesh.FaceMesh(refine_landmarks=True)
hands = mp_hands.Hands()

def calculate_ear(landmarks, eye_indices):
    p = np.array([landmarks[i] for i in eye_indices])
    vertical1 = np.linalg.norm(p[1] - p[5])
    vertical2 = np.linalg.norm(p[2] - p[4])
    horizontal = np.linalg.norm(p[0] - p[3])
    return (vertical1 + vertical2) / (2.0 * horizontal)

def calculate_hand_movement(history):
    if len(history) < 2:
        return 0
    deltas = [np.linalg.norm(np.array(history[i]) - np.array(history[i - 1])) for i in range(1, len(history))]
    recent_deltas = deltas[-30:]  # 최근 5초 기준
    return sum(recent_deltas) / len(recent_deltas)

def drowsiness_detection_loop():
    global drowsy, reason, already_alerted
    global eye_start_time, hand_start_time, head_start_time
    global eye_condition, hand_condition, head_condition
    global nose_y_history, hand_10_history

    cap = cv2.VideoCapture(0)
    while True:
        success, frame = cap.read()
        if not success:
            continue

        frame = cv2.flip(frame, 1)
        rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        face_results = face_mesh.process(rgb)
        hand_results = hands.process(rgb)
        current_time = time.time()
        h, w, _ = frame.shape
        reason = ""

        if face_results.multi_face_landmarks:
            for face_landmarks in face_results.multi_face_landmarks:
                landmarks = [(int(lm.x * w), int(lm.y * h)) for lm in face_landmarks.landmark]

                LEFT_EYE = [33, 160, 158, 133, 153, 144]
                RIGHT_EYE = [362, 385, 387, 263, 373, 380]
                left_ear = calculate_ear(landmarks, LEFT_EYE)
                right_ear = calculate_ear(landmarks, RIGHT_EYE)
                ear = (left_ear + right_ear) / 2.0
                print(f"[EYE] EAR: {ear:.3f}")

                if ear < 0.23:
                    if eye_start_time is None:
                        eye_start_time = current_time
                    else:
                        duration = current_time - eye_start_time
                        print(f"[EYE] EAR 조건 유지 시간: {duration:.1f}초")
                        if duration >= 5:
                            eye_condition = True
                else:
                    eye_start_time = None
                    eye_condition = False

                nose_y = landmarks[1][1]
                nose_y_history.append(nose_y)
                if len(nose_y_history) > 180:
                    nose_y_history.pop(0)

                if len(nose_y_history) >= 30:
                    baseline_y = sum(nose_y_history[:30]) / 30
                    dy = nose_y - baseline_y
                    print(f"[HEAD] DY: {dy:.2f}")
                    if dy > 20:
                        if head_start_time is None:
                            head_start_time = current_time
                        else:
                            duration = current_time - head_start_time
                            print(f"[HEAD] DY 조건 유지 시간: {duration:.1f}초")
                            if duration >= 4:
                                head_condition = True
                    else:
                        head_start_time = None
                        head_condition = False

        if hand_results.multi_hand_landmarks:
            for hand_landmarks in hand_results.multi_hand_landmarks:
                x = int(hand_landmarks.landmark[10].x * w)
                y = int(hand_landmarks.landmark[10].y * h)
                hand_10_history.append((x, y))
                if len(hand_10_history) > 180:
                    hand_10_history.pop(0)

            movement = calculate_hand_movement(hand_10_history)
            print(f"[HAND] Movement: {movement:.2f}")
            if movement < 50:
                if hand_start_time is None:
                    hand_start_time = current_time
                else:
                    duration = current_time - hand_start_time
                    print(f"[HAND] Movement 조건 유지 시간: {duration:.1f}초")
                    if duration >= 4:
                        hand_condition = True
            else:
                hand_start_time = None
                hand_condition = False

        if not already_alerted:
            if hand_condition and head_condition:
                drowsy = True
                reason = "HAND + HEAD"
                already_alerted = True
                print("=== DROWSINESS DETECTED: HAND + HEAD ===")
            elif hand_condition and eye_condition:
                drowsy = True
                reason = "HAND + EYE"
                already_alerted = True
                print("=== DROWSINESS DETECTED: HAND + EYE ===")
            else:
                drowsy = False

        cv2.imshow("Camera Preview", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

@app.route("/detect_drowsiness", methods=["GET"])
def detect_drowsiness():
    return jsonify({"drowsy": drowsy, "reason": reason})

@app.route("/reset", methods=["GET"])
def reset_status():
    global drowsy, already_alerted, reason
    global eye_start_time, hand_start_time, head_start_time
    global eye_condition, hand_condition, head_condition
    global nose_y_history, hand_10_history

    drowsy = False
    already_alerted = False
    reason = ""
    eye_start_time = None
    hand_start_time = None
    head_start_time = None
    eye_condition = False
    hand_condition = False
    head_condition = False
    nose_y_history.clear()
    hand_10_history.clear()
    print("[RESET] System reset")
    return jsonify({"status": "reset"})

if __name__ == "__main__":
    threading.Thread(target=drowsiness_detection_loop, daemon=True).start()
    app.run(host="0.0.0.0", port=5000)
