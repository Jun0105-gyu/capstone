import cv2
import time
import threading
import numpy as np
from flask import Flask, jsonify, request
from mediapipe.python.solutions import pose as mp_pose
from mediapipe.python.solutions import hands as mp_hands
from mediapipe.python.solutions import face_mesh as mp_face_mesh

app = Flask(__name__)

# =====================
# Global State
# =====================
timer_running = False
start_time = None
elapsed_time = 0
elapsed_before_stop = 0
drowsy_detected = False

# 졸음 감지 상태 및 유지 시간
ear_condition_start = None
dy_condition_start = None
hand_condition_start = None
drowsiness_reason = ""
lock = threading.Lock()

# DY 기준용 초기 값
nose_base_y = None

# MediaPipe 초기화
pose = mp_pose.Pose()
hands = mp_hands.Hands()
face_mesh = mp_face_mesh.FaceMesh()

# =====================
# Timer 관련 함수
# =====================
def timer_loop():
    global start_time, elapsed_time
    while True:
        if timer_running and start_time is not None:
            elapsed_time = time.time() - start_time + elapsed_before_stop
        time.sleep(1)

def format_time(seconds):
    h = int(seconds) // 3600
    m = (int(seconds) % 3600) // 60
    s = int(seconds) % 60
    return f"{h:02}:{m:02}:{s:02}"

@app.route("/start")
def start():
    global timer_running, start_time
    with lock:
        if not timer_running:
            start_time = time.time()
            timer_running = True
            print("[API] Timer started")
    return "Started"

@app.route("/stop")
def stop():
    global timer_running, elapsed_before_stop
    with lock:
        if timer_running:
            timer_running = False
            elapsed_before_stop = elapsed_time
            print("[API] Timer stopped")
    return "Stopped"

@app.route("/reset")
def reset():
    global timer_running, start_time, elapsed_time, elapsed_before_stop
    global ear_condition_start, dy_condition_start, hand_condition_start, drowsy_detected, drowsiness_reason
    with lock:
        timer_running = False
        start_time = None
        elapsed_time = 0
        # elapsed_before_stop은 초기화하지 않음
        ear_condition_start = None
        dy_condition_start = None
        hand_condition_start = None
        drowsy_detected = False
        drowsiness_reason = ""
        print("[RESET] System reset")
    return "Reset"

@app.route("/get_time")
def get_time():
    return jsonify({"time": format_time(elapsed_time)})

@app.route("/update_time", methods=["POST"])
def update_time():
    global elapsed_before_stop
    data = request.get_json()
    time_str = data.get("time", "00:00:00")
    h, m, s = map(int, time_str.split(":"))
    elapsed_before_stop = h * 3600 + m * 60 + s
    print("[RECEIVED TIME]", time_str)
    return "Time updated"

# =====================
# 졸음 감지 함수
# =====================
def drowsiness_detection_loop():
    global ear_condition_start, dy_condition_start, hand_condition_start
    global drowsy_detected, drowsiness_reason, nose_base_y

    cap = cv2.VideoCapture(0)
    nose_y_history = []
    hand_history = []

    while True:
        ret, frame = cap.read()
        if not ret:
            continue

        rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        pose_results = pose.process(rgb)
        hands_results = hands.process(rgb)
        face_results = face_mesh.process(rgb)

        current_time = time.time()

        # EAR 계산
        ear = 0.3
        if face_results.multi_face_landmarks:
            face_landmarks = face_results.multi_face_landmarks[0]
            left = np.array([face_landmarks.landmark[159].x, face_landmarks.landmark[159].y])
            right = np.array([face_landmarks.landmark[145].x, face_landmarks.landmark[145].y])
            top = np.array([face_landmarks.landmark[386].x, face_landmarks.landmark[386].y])
            bottom = np.array([face_landmarks.landmark[374].x, face_landmarks.landmark[374].y])
            ear = np.linalg.norm(top - bottom) / np.linalg.norm(left - right)
        print(f"[EYE] EAR: {ear:.3f}")

        if ear < 0.2:
            if ear_condition_start is None:
                ear_condition_start = current_time
            duration = current_time - ear_condition_start
            print(f"[EYE] EAR 조건 유지 시간: {duration:.1f}초")
        else:
            ear_condition_start = None

        # DY 계산
        dy = 0
        if pose_results.pose_landmarks:
            nose_y = pose_results.pose_landmarks.landmark[0].y
            if nose_base_y is None:
                nose_base_y = nose_y
            dy = (nose_y - nose_base_y) * 1000
            print(f"[HEAD] DY: {dy:.2f}")
            if dy > 20:
                if dy_condition_start is None:
                    dy_condition_start = current_time
                duration = current_time - dy_condition_start
                print(f"[HEAD] DY 조건 유지 시간: {duration:.1f}초")
            else:
                dy_condition_start = None

        # 손 움직임
        movement = 0
        if hands_results.multi_hand_landmarks:
            lm = hands_results.multi_hand_landmarks[0].landmark[10]
            hand_history.append((lm.x, lm.y, current_time))
            hand_history = [h for h in hand_history if current_time - h[2] <= 5]

            if len(hand_history) >= 2:
                diffs = [np.linalg.norm(np.array(hand_history[i][:2]) - np.array(hand_history[i-1][:2])) for i in range(1, len(hand_history))]
                movement = np.mean(diffs) * 1000
        print(f"[HAND] Movement: {movement:.2f}")

        if movement < 50:
            if hand_condition_start is None:
                hand_condition_start = current_time
            duration = current_time - hand_condition_start
            print(f"[HAND] Movement 조건 유지 시간: {duration:.1f}초")
        else:
            hand_condition_start = None

        # 졸음 감지
        if not drowsy_detected and timer_running:
            eye_drowsy = ear_condition_start and (current_time - ear_condition_start >= 5)
            head_drowsy = dy_condition_start and (current_time - dy_condition_start >= 4)
            hand_drowsy = hand_condition_start and (current_time - hand_condition_start >= 5)

            if hand_drowsy and (eye_drowsy or head_drowsy):
                drowsy_detected = True
                if eye_drowsy:
                    drowsiness_reason = "HAND + EYE"
                else:
                    drowsiness_reason = "HAND + HEAD"
                print(f"=== DROWSINESS DETECTED: {drowsiness_reason} ===")

        cv2.imshow("Drowsiness Detection", frame)
        if cv2.waitKey(1) & 0xFF == ord("q"):
            break

    cap.release()
    cv2.destroyAllWindows()

@app.route("/detect_drowsiness")
def detect_drowsiness():
    return jsonify({"drowsy": drowsy_detected, "reason": drowsiness_reason})
if __name__ == "__main__":
    threading.Thread(target=drowsiness_detection_loop, daemon=True).start()
    threading.Thread(target=timer_loop, daemon=True).start()
    app.run(host="0.0.0.0", port=5000)
