import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:async';
import 'dart:convert';

void main() {
  runApp(DrowsinessApp());
}

class DrowsinessApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Drowsiness Timer',
      home: StopwatchPage(),
    );
  }
}

class StopwatchPage extends StatefulWidget {
  @override
  _StopwatchPageState createState() => _StopwatchPageState();
}

class _StopwatchPageState extends State<StopwatchPage> {
  String _time = "00:00:00";
  Timer? _timer;
  bool _isRunning = false;
  bool isDrowsy = false;

  final String flaskURL = "http://192.168.137.69:5000"; // ← 본인의 Flask IP

  @override
  void initState() {
    super.initState();
    _resetServer(); // 앱 실행 시 서버 초기화
  }

  Future<void> _resetServer() async {
    try {
      final res = await http.get(Uri.parse('$flaskURL/reset'));
      print("[APP] 서버 초기화 완료: ${res.statusCode}");
    } catch (e) {
      print("[APP] 서버 초기화 실패: $e");
    }
  }

  void _startTimer() async {
    await http.get(Uri.parse('$flaskURL/start'));
    _isRunning = true;
    _timer = Timer.periodic(Duration(seconds: 1), (timer) {
      _fetchTime();
      _checkDrowsiness();
    });
  }

  void _stopTimer() async {
    await http.get(Uri.parse('$flaskURL/stop'));
    _isRunning = false;
    _timer?.cancel();
  }

  void _resetTimer() async {
    await http.get(Uri.parse('$flaskURL/reset'));
    setState(() {
      _time = "00:00:00";
    });
  }

  Future<void> _fetchTime() async {
    try {
      final res = await http.get(Uri.parse('$flaskURL/get_time'));
      if (res.statusCode == 200) {
        final data = jsonDecode(res.body);
        setState(() {
          _time = data['time'];
        });
      }
    } catch (e) {
      print("시간 조회 실패: $e");
    }
  }

  Future<void> _checkDrowsiness() async {
    try {
      final res = await http.get(Uri.parse('$flaskURL/detect_drowsiness'));
      if (res.statusCode == 200) {
        final data = jsonDecode(res.body);
        if (data["drowsy"] == true && !isDrowsy) {
          isDrowsy = true;
          _stopTimer();
          _showDrowsyDialog();
        }
      }
    } catch (e) {
      print("졸음 체크 실패: $e");
    }
  }

  void _showDrowsyDialog() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (_) => AlertDialog(
        title: Text("졸음 감지!"),
        content: Text("졸음이 감지되었습니다."),
        actions: [
          TextButton(
            onPressed: () async {
              await _resetServer(); // 팝업 확인 시 서버 초기화
              setState(() => isDrowsy = false);
              Navigator.of(context).pop();
            },
            child: Text("확인"),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _timer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Drowsiness Timer")),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(_time, style: TextStyle(fontSize: 48)),
          SizedBox(height: 20),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(onPressed: _startTimer, child: Text("Start")),
              SizedBox(width: 10),
              ElevatedButton(onPressed: _stopTimer, child: Text("Stop")),
              SizedBox(width: 10),
              ElevatedButton(onPressed: _resetTimer, child: Text("Reset")),
            ],
          ),
        ],
      ),
    );
  }
}
