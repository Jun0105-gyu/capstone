import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:async';
import 'package:audioplayers/audioplayers.dart';

void main() {
  runApp(MaterialApp(
    title: 'Drowsiness Timer',
    home: DrowsinessTimerPage(),
  ));
}

class DrowsinessTimerPage extends StatefulWidget {
  @override
  _DrowsinessTimerPageState createState() => _DrowsinessTimerPageState();
}

class _DrowsinessTimerPageState extends State<DrowsinessTimerPage> {
  Stopwatch _stopwatch = Stopwatch();
  Timer? _timer;
  String _formattedTime = "00:00:00";
  final String flaskURL = 'http://192.168.137.69:5000'; // 사용자의 Raspberry Pi 주소
  bool isDrowsy = false;
  AudioPlayer? _audioPlayer;

  void _startTimer() {
    if (!_stopwatch.isRunning) {
      _stopwatch.start();
      _timer = Timer.periodic(Duration(seconds: 1), (timer) async {
        setState(() {
          _formattedTime = _formatDuration(_stopwatch.elapsed);
        });
        await sendTimeToFlask(_formattedTime);
        await checkDrowsiness();
      });
    }
  }

  void _stopTimer() {
    _stopwatch.stop();
    _timer?.cancel();
    sendTimeToFlask(_formattedTime);
  }

  void _resetTimer() async {
    _stopwatch.reset();
    setState(() {
      _formattedTime = "00:00:00";
    });
    _stopwatch.stop();
    _timer?.cancel();
    _timer = null;
    await http.get(Uri.parse('$flaskURL/reset'));
  }

  Future<void> sendTimeToFlask(String time) async {
    try {
      final res = await http.post(
        Uri.parse('$flaskURL/update_time'),
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({"time": time}),
      );
      if (res.statusCode != 200) {
        print("Failed to send time: ${res.statusCode}");
      }
    } catch (e) {
      print("Failed to send time: $e");
    }
  }

  Future<void> checkDrowsiness() async {
    try {
      final res = await http.get(Uri.parse('$flaskURL/detect_drowsiness'));
      if (res.statusCode == 200) {
        final data = jsonDecode(res.body);
        if (data["drowsy"] == true && !isDrowsy) {
          isDrowsy = true;
          _stopTimer();
          playAlertLoop();
          showDialog(
            context: context,
            barrierDismissible: false,
            builder: (_) => AlertDialog(
              title: Text("Drowsiness Detected!"),
              content: Text("졸음이 감지되었습니다."),
              actions: [
                TextButton(
                  onPressed: () {
                    stopAlert();
                    Navigator.pop(context);
                    isDrowsy = false;
                  },
                  child: Text("확인"),
                )
              ],
            ),
          );
        }
      }
    } catch (e) {
      print("Failed to check drowsiness: $e");
    }
  }

  void playAlertLoop() async {
    _audioPlayer = AudioPlayer();
    await _audioPlayer!.setReleaseMode(ReleaseMode.loop);
    await _audioPlayer!.play(AssetSource('sound/alert.mp3'));
  }

  void stopAlert() async {
    if (_audioPlayer != null) {
      await _audioPlayer!.stop();
      await _audioPlayer!.dispose();
      _audioPlayer = null;
    }
  }

  String _formatDuration(Duration d) {
    String two(int n) => n.toString().padLeft(2, "0");
    return "${two(d.inHours)}:${two(d.inMinutes % 60)}:${two(d.inSeconds % 60)}";
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Drowsiness Timer')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(_formattedTime, style: TextStyle(fontSize: 48)),
            SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                ElevatedButton(onPressed: _startTimer, child: Text("Start")),
                SizedBox(width: 10),
                ElevatedButton(onPressed: _stopTimer, child: Text("Stop")),
                SizedBox(width: 10),
                ElevatedButton(onPressed: _resetTimer, child: Text("Reset")),
              ],
            )
          ],
        ),
      ),
    );
  }
}
