import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:async';
import 'package:intl/intl.dart';
import 'package:drowsy_timer/stats/statistics_page.dart'; // 통계 페이지 import
import 'package:drowsy_timer/stats/db_helper.dart';

void main() {
  runApp(DrowsinessApp());
}

class DrowsinessApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Drowsiness Stopwatch',
      home: StopwatchPage(),
    );
  }
}

class StopwatchPage extends StatefulWidget {
  @override
  _StopwatchPageState createState() => _StopwatchPageState();
}

class _StopwatchPageState extends State<StopwatchPage> {
  bool isRunning = false;
  Stopwatch stopwatch = Stopwatch();
  Timer? _timer;

  void startTimer() {
    stopwatch.start();
    isRunning = true;

    _timer = Timer.periodic(Duration(seconds: 1), (timer) async {
      setState(() {}); // 화면 갱신

      try {
        final response = await http.get(Uri.parse('http://192.168.137.69:5000/detect_drowsiness'));

        if (response.statusCode == 200) {
          print("Response: ${response.body}");

          if (response.body.contains("true")) {
            stopTimer();
            showDialog(
              context: context,
              builder: (context) => AlertDialog(
                title: Text("Drowsiness Detected!"),
                content: Text("The timer has been stopped."),
                actions: [
                  TextButton(
                    onPressed: () => Navigator.of(context).pop(),
                    child: Text("OK"),
                  )
                ],
              ),
            );
          }
        } else {
          print("Failed with status: ${response.statusCode}");
        }
      } catch (e) {
        print("Error sending request: $e");
      }
    });
  }

  void stopTimer() async {
    stopwatch.stop();
    isRunning = false;
    _timer?.cancel();

    final dbHelper = DatabaseHelper();
    final now = DateTime.now();
    final date = DateFormat('yyyy-MM-dd').format(now);
    final seconds = stopwatch.elapsed.inSeconds;

    await dbHelper.insertRecord({'date': date, 'seconds': seconds});

    setState(() {});
  }

  String formatTime(Duration duration) {
    final minutes = duration.inMinutes.toString().padLeft(2, '0');
    final seconds = (duration.inSeconds % 60).toString().padLeft(2, '0');
    return '$minutes:$seconds';
  }

  @override
  void dispose() {
    _timer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Drowsiness Stopwatch')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              formatTime(stopwatch.elapsed),
              style: TextStyle(fontSize: 40),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: isRunning ? stopTimer : startTimer,
              child: Text(isRunning ? 'Stop' : 'Start'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => StatisticsPage()),
                );
              },
              child: Text('View Statistics'),
            ),
          ],
        ),
      ),
    );
  }
}
