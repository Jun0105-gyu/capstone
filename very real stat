import 'package:flutter/material.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class StatisticsPage extends StatefulWidget {
  @override
  _StatisticsPageState createState() => _StatisticsPageState();
}

class _StatisticsPageState extends State<StatisticsPage> {
  String _selectedPeriod = 'week'; // 기본값: 주별
  Map<String, int> _studyData = {};

  @override
  void initState() {
    super.initState();
    _loadData();
  }

  Future<void> _loadData() async {
    final response = await http.get(Uri.parse('http://192.168.137.69:5000/get_stats'));
    if (response.statusCode == 200) {
      final Map<String, dynamic> data = jsonDecode(response.body);
      setState(() {
        _studyData = data.map((k, v) {
          if (v is int) return MapEntry(k, v);
          if (v is double) return MapEntry(k, v.toInt());
          return MapEntry(k, int.tryParse(v.toString()) ?? 0);
        });
      });
    }
  }

  /// ---- 주별 데이터 요약 함수 (월~일, 이번 주만 보임) ----
  Map<String, int> _getWeeklyData(Map<String, int> data) {
    final now = DateTime.now();
    // 이번 주 월요일 (weekday==1)
    final monday = DateTime(now.year, now.month, now.day).subtract(Duration(days: now.weekday - 1));
    final result = { for (final d in ['월','화','수','목','금','토','일']) d: 0 };
    data.forEach((date, seconds) {
      final d = DateTime.tryParse(date);
      if (d != null) {
        // 이번 주 월~일 범위만 포함
        if (!d.isBefore(monday) && d.isBefore(monday.add(Duration(days: 7)))) {
          final weekdayKor = '월화수목금토일'[d.weekday - 1]; // 1=월, ..., 7=일
          result[weekdayKor] = (result[weekdayKor] ?? 0) + seconds;
        }
      }
    });
    return result;
  }

  /// ---- 월별 데이터 요약 함수 (1월~12월) ----
  Map<String, int> _getMonthlyData(Map<String, int> data) {
    final now = DateTime.now();
    final result = { for (int i = 1; i <= 12; i++) '$i월': 0 };
    data.forEach((date, seconds) {
      final d = DateTime.tryParse(date);
      if (d != null && d.year == now.year) {
        result['${d.month}월'] = (result['${d.month}월'] ?? 0) + seconds;
      }
    });
    return result;
  }

  /// ---- BarChart 그리기 ----
  List<BarChartGroupData> _buildBarGroups() {
    Map<String, int> chartData;
    List<String> labels;
    if (_selectedPeriod == 'week') {
      chartData = _getWeeklyData(_studyData);
      labels = ['월','화','수','목','금','토','일'];
    } else {
      chartData = _getMonthlyData(_studyData);
      labels = [for (int i=1; i<=12; i++) '$i월'];
    }
    return List.generate(labels.length, (index) {
      final durationSec = chartData[labels[index]] ?? 0;
      return BarChartGroupData(
        x: index,
        barRods: [
          BarChartRodData(
            toY: durationSec.toDouble() / 10, // 분 단위
            width: 20,
            borderRadius: BorderRadius.circular(4),
            backDrawRodData: BackgroundBarChartRodData(show: false),
          )
        ],
      );
    });
  }

  List<String> _buildLabels() {
    if (_selectedPeriod == 'week') {
      return ['월','화','수','목','금','토','일'];
    } else {
      return [for (int i=1; i<=12; i++) '$i월'];
    }
  }

  String _formatDuration(int seconds) {
    final d = Duration(seconds: seconds);
    final h = d.inHours;
    final m = d.inMinutes % 60;
    final s = d.inSeconds % 60;
    return "${h}h ${m}m ${s}s";
  }

  @override
  Widget build(BuildContext context) {
    final labels = _buildLabels();
    final barGroups = _buildBarGroups();

    // 탭에 따라 총합 계산
    Map<String, int> chartData = _selectedPeriod == 'week'
        ? _getWeeklyData(_studyData)
        : _getMonthlyData(_studyData);
    int totalSeconds = chartData.values.fold(0, (a, b) => a + b);

    return Scaffold(
      appBar: AppBar(title: Text("통계")),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(8),
            child: DropdownButton<String>(
              value: _selectedPeriod,
              items: [
                DropdownMenuItem(value: 'week', child: Text("주별")),
                DropdownMenuItem(value: 'month', child: Text("월별")),
              ],
              onChanged: (value) {
                setState(() => _selectedPeriod = value!);
              },
            ),
          ),
          Expanded(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: BarChart(
                BarChartData(
                  barGroups: barGroups,
                  maxY: 60.0, // 0~10분
                  titlesData: FlTitlesData(
                    leftTitles: AxisTitles(
                      sideTitles: SideTitles(showTitles: false, interval: 1.0),
                    ),
                    bottomTitles: AxisTitles(
                      sideTitles: SideTitles(
                        showTitles: true,
                        getTitlesWidget: (double value, meta) {
                          final i = value.toInt();
                          if (i >= 0 && i < labels.length) {
                            return Text(labels[i], style: TextStyle(fontSize: 11));
                          }
                          return Text('');
                        },
                      ),
                    ),
                  ),
                  gridData: FlGridData(show: true, horizontalInterval: 1.0),
                  borderData: FlBorderData(show: true),
                ),
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.symmetric(vertical: 8),
            child: Text(
              "총 공부 시간: " + _formatDuration(totalSeconds),
              style: TextStyle(fontSize: 16),
            ),
          ),
        ],
      ),
    );
  }
}
