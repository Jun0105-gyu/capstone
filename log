# EAR calculation (only top-bottom distance)
ear = 0
if face_results.multi_face_landmarks:
    lm = face_results.multi_face_landmarks[0].landmark
    top = np.array([lm[386].x, lm[386].y])
    bottom = np.array([lm[374].x, lm[374].y])
    ear = np.linalg.norm(top - bottom)  # pure vertical distance
    print(f"[EYE] EAR (top-bottom distance): {ear:.3f}")

    if ear < 0.015:
        if not ear_condition_start:
            ear_condition_start = current_time
        print(f"[EYE] EAR condition duration: {current_time - ear_condition_start:.1f} seconds")
    else:
        ear_condition_start = None
else:
    ear_condition_start = None  # 얼굴 없으면 초기화

# DY calculation
dy = 0
if pose_results.pose_landmarks:
    nose_y = pose_results.pose_landmarks.landmark[0].y
    if nose_base_y is None:
        nose_base_y = nose_y
    dy = (nose_y - nose_base_y) * 1000
    print(f"[HEAD] DY: {dy:.2f}")
    if dy > 150:
        if not dy_condition_start:
            dy_condition_start = current_time
        print(f"[HEAD] DY condition duration: {current_time - dy_condition_start:.1f} seconds")
    else:
        dy_condition_start = None
else:
    dy_condition_start = None  # 머리(포즈) 없으면 초기화

# Hand movement
movement = 0
if hands_results.multi_hand_landmarks:
    lm = hands_results.multi_hand_landmarks[0].landmark[10]
    hand_history.append((lm.x, lm.y, current_time))
    hand_history = [h for h in hand_history if current_time - h[2] <= 5]
    if len(hand_history) >= 2:
        movement = np.mean([
            np.linalg.norm(np.array(hand_history[i][:2]) - np.array(hand_history[i-1][:2]))
            for i in range(1, len(hand_history))
        ]) * 1000
    print(f"[HAND] Movement: {movement:.2f}")

    if movement < 13:
        if not hand_condition_start:
            hand_condition_start = current_time
        print(f"[HAND] Movement condition duration: {current_time - hand_condition_start:.1f} seconds")
    else:
        hand_condition_start = None
else:
    hand_condition_start = None  # 손 없으면 초기화
